/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.65
 * Generated at: 2021-07-31 14:18:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class join_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/WEB-INF/views/member/../layout/footer.jsp", Long.valueOf(1627715096899L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
 request.setCharacterEncoding("utf-8"); 
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../layout/header2.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("회원가입", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"resources/css/layout.css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"resources/css/join.css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\" referrerpolicy=\"no-referrer\" />\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\t<script src=\"http://developers.kakao.com/sdk/js/kakao.min.js\"></script> <!-- 카카오 API -->\r\n");
      out.write("\r\n");
      out.write("\t<!-- script -->\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t// 페이지 로드\r\n");
      out.write("\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\tfn_nameCheck();\r\n");
      out.write("\t\t\tfn_idCheck();\r\n");
      out.write("\t\t\tfn_pwCheck();\r\n");
      out.write("\t\t\tfn_pwCheck2();\r\n");
      out.write("\t\t\tfn_emailCheck();\r\n");
      out.write("\t\t\tfn_emailCode();\r\n");
      out.write("\t\t\tfn_phoneCheck();\r\n");
      out.write("\t\t\tfn_join();\r\n");
      out.write("\t\t\tfn_getKakaoInfo();\r\n");
      out.write("\t\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 이름 유효성 검사(nameCheck)\r\n");
      out.write("\t\tvar namePass = false;\r\n");
      out.write("\t\tfunction fn_nameCheck(){\r\n");
      out.write("\t\t\t$('#mName').keyup(function(){\r\n");
      out.write("\t\t\t\t// 이름 정규식\r\n");
      out.write("\t\t\t\tvar regNAME = /^[가-힣a-zA-Z]{3,10}$/; \r\n");
      out.write("\t\t\t\tif(regNAME.test($('#mName').val())){ // 이름 정규식 조건을 통과 했을 경우\r\n");
      out.write("\t\t\t\t\t$('.name_result').text('');\r\n");
      out.write("\t\t\t\t\tnamePass = true;\r\n");
      out.write("\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t$('.name_result').text('이름은 3~10글자로 구성된 한글, 영문자만 입력 가능합니다.');\r\n");
      out.write("\t\t\t\t\t$('.name_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\tnamePass = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 아이디 중복 체크(idCheck)\r\n");
      out.write("\t\tvar idPass = false;\r\n");
      out.write("\t\tfunction fn_idCheck(){\r\n");
      out.write("\t\t\t$('#mId').keyup(function(){\r\n");
      out.write("\t\t\t\t// 아이디 정규식\r\n");
      out.write("\t\t\t\tvar regId = /^[0-9a-zA-Z@]{4,19}$/;\r\n");
      out.write("\t\t\t\tif(!regId.test($('#mId').val())){ // 아이디 정규식 조건을 통과하지 못 했을 경우\r\n");
      out.write("\t\t\t\t\t$('.id_result').text('아이디는 영어 소문자 3~6자리만 입력 가능합니다.');\r\n");
      out.write("\t\t\t\t\t$('.id_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t// 실제 사용할 ID 정규식\r\n");
      out.write("\t\t\t\t\t// ^[a-z][a-z0-9_-]{4,19}$\r\n");
      out.write("\t\t\t\t\t// 아이디는 영어 소문자(a~z)로 시작하고, 소문자/숫자(0~9)/특수기호(_, -) 포함 5~20자 입니다.\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: 'idCheck.do',\r\n");
      out.write("\t\t\t\t\ttype: 'get', // get방식 : 파라미터 값 그대로 전달\r\n");
      out.write("\t\t\t\t\tdata: 'mId=' + $('#mId').val(), // 보내는 data\r\n");
      out.write("\t\t\t\t\tdataType: 'json', // 받는 data\r\n");
      out.write("\t\t\t\t\tsuccess: function(resultMap){\r\n");
      out.write("\t\t\t\t\t\tif(resultMap.result == 0){ // DB에 일치하는 id가 없는 경우\r\n");
      out.write("\t\t\t\t\t\t\t$('.id_result').text('사용 가능한 아이디입니다.');\r\n");
      out.write("\t\t\t\t\t\t\t$('.id_result').css('color', '#804040');\r\n");
      out.write("\t\t\t\t\t\t\tidPass = true;\r\n");
      out.write("\t\t\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t\t\t$('.id_result').text('이미 사용 중인 아이디입니다.');\r\n");
      out.write("\t\t\t\t\t\t\t$('.id_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t\t\tidPass = false;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 비밀번호 검증(pwCheck)\r\n");
      out.write("\t\tvar pwPass = false;\r\n");
      out.write("\t\tfunction fn_pwCheck(){\r\n");
      out.write("\t\t\t$('#mPw').keyup(function(){\r\n");
      out.write("\t\t\t\t// 비밀번호 정규식\r\n");
      out.write("\t\t\t\tvar regPW = /^[0-9]{4}$/; \r\n");
      out.write("\t\t\t\tif(regPW.test($('#mPw').val())){ // 비밀번호 정규식 조건을 통과 했을 경우\r\n");
      out.write("\t\t\t\t\t$('.pw_result').text('사용 가능한 비밀번호입니다.');\r\n");
      out.write("\t\t\t\t\t$('.pw_result').css('color', '#804040');\r\n");
      out.write("\t\t\t\t\tpwPass = true;\r\n");
      out.write("\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t$('.pw_result').text('비밀번호는 숫자(0~9) 4자리만 입력 가능합니다.');\r\n");
      out.write("\t\t\t\t\t$('.pw_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t// 실제 사용할 PW 정규식\r\n");
      out.write("\t\t\t\t\t// ^[A-Za-z0-9`~!@#$%^&*]{4,19}$\r\n");
      out.write("\t\t\t\t\t// 비밀번호는 영어 대,소문자/숫자/특수기호 포함 5~20자리 입니다.\r\n");
      out.write("\t\t\t\t\tpwPass = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 비밀번호 확인 검증(pwCheck2)\r\n");
      out.write("\t\tvar pwPass2 = false;\r\n");
      out.write("\t\tfunction fn_pwCheck2(){\r\n");
      out.write("\t\t\t$('#mPw2').keyup(function(){\r\n");
      out.write("\t\t\t\tif($('#mPw').val() == $('#mPw2').val()){ // 입력한 비밀번호와 비밀번호 확인 값이 일치할 경우\r\n");
      out.write("\t\t\t\t\t$('.pw2_result').text('비밀번호가 일치합니다.');\r\n");
      out.write("\t\t\t\t\t$('.pw2_result').css('color', '#804040');\r\n");
      out.write("\t\t\t\t\tpwPass2 = true;\r\n");
      out.write("\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t$('.pw2_result').text('입력하신 비밀번호가 일치하지 않습니다. 비밀번호를 확인하세요.');\r\n");
      out.write("\t\t\t\t\t$('.pw2_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t$('#mPw2').focus();\r\n");
      out.write("\t\t\t\t\tpwPass2 = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 이메일 중복 체크(emailCheck)\r\n");
      out.write("\t\tvar emailPass = false;\r\n");
      out.write("\t\tvar fromKakao = false;\r\n");
      out.write("\t\tfunction fn_emailCheck(){\r\n");
      out.write("\t\t\t$('#mEmail').keyup(function(){\r\n");
      out.write("\t\t\t\t// 이메일 정규식\r\n");
      out.write("\t\t\t\tvar regEmail = /^[a-z0-9][a-z0-9_-]*@[a-zA-Z0-9]+([.][a-zA-Z]{2,}){1,2}$/;\r\n");
      out.write("\t\t\t\tif(!regEmail.test($('#mEmail').val())){ // 이메일 정규식 조건을 통과하지 못 했을 경우\r\n");
      out.write("\t\t\t\t\t$('.email_result').text('이메일 형식에 맞지 않습니다. 다시 입력하세요.');\r\n");
      out.write("\t\t\t\t\t$('.email_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: 'emailCheck.do',\r\n");
      out.write("\t\t\t\t\ttype: 'get',\r\n");
      out.write("\t\t\t\t\tdata: 'mEmail=' + $('#mEmail').val(),\r\n");
      out.write("\t\t\t\t\tdataType: 'json',\r\n");
      out.write("\t\t\t\t\tsuccess: function(resultMap){\r\n");
      out.write("\t\t\t\t\t\tif(resultMap.result == 0){ // DB에 일치하는 email이 없는 경우\r\n");
      out.write("\t\t\t\t\t\t\t$('.email_result').text('사용 가능한 이메일입니다. 인증코드를 받으세요.');\r\n");
      out.write("\t\t\t\t\t\t\t$('.email_result').css('color', '#804040');\r\n");
      out.write("\t\t\t\t\t\t\temailPass = true;\r\n");
      out.write("\t\t\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t\t\t$('.email_result').text('이미 사용 중인 이메일입니다. 이메일 주소를 확인하세요.');\r\n");
      out.write("\t\t\t\t\t\t\t$('.email_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t\t\temailPass = false;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 이메일 인증코드 받기(emailCode)\r\n");
      out.write("\t\t// 이메일 인증코드 받기(root-context에서 이메일 bean 생성)\r\n");
      out.write("\t\tfunction fn_emailCode(){\r\n");
      out.write("\t\t\t$('#emailCode_btn').click(function(){\r\n");
      out.write("\t\t\t\tif($('#mEmail').val() == ''){\r\n");
      out.write("\t\t\t\t\talert('이메일을 입력하세요.');\r\n");
      out.write("\t\t\t\t\t$('#mEmail').focus();\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: 'emailCode.do',\r\n");
      out.write("\t\t\t\t\ttype: 'get',\r\n");
      out.write("\t\t\t\t\tdata: 'mEmail=' + $('#mEmail').val(),\r\n");
      out.write("\t\t\t\t\tdataType: 'json',\r\n");
      out.write("\t\t\t\t\tsuccess: function(resultMap){\r\n");
      out.write("\t\t\t\t\t\talert('인증코드가 발송되었습니다. 메일을 확인하세요.');\r\n");
      out.write("\t\t\t\t\t\tfn_emailAuth(resultMap.authCode);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 이메일 인증(emailAuth)\r\n");
      out.write("\t\tvar authPass = false;\r\n");
      out.write("\t\tfunction fn_emailAuth(authCode){\r\n");
      out.write("\t\t\t$('#emailAuth_btn').click(function(){\r\n");
      out.write("\t\t\t\tif(authCode == $('#userKey').val()){ // 받은 인증코드와 입력된 값이 같을 경우\r\n");
      out.write("\t\t\t\t\t$('.emailAuth_result').text('인증되었습니다.');\r\n");
      out.write("\t\t\t\t\t$('.emailAuth_result').css('color', '#804040');\r\n");
      out.write("\t\t\t\t\tauthPass = true;\r\n");
      out.write("\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t$('.emailAuth_result').text('인증에 실패했습니다. 다시 시도해주세요.');\r\n");
      out.write("\t\t\t\t\t$('.emailAuth_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\t$('#mEmail').val() == '';\r\n");
      out.write("\t\t\t\t\tauthPass = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 전화번호 유효성 검사(phoneCheck)\r\n");
      out.write("\t\tvar phonePass = false;\r\n");
      out.write("\t\tfunction fn_phoneCheck(){\r\n");
      out.write("\t\t\t$('#mPhone').keyup(function(){\r\n");
      out.write("\t\t\t\t// 전화번호 정규식\r\n");
      out.write("\t\t\t\tvar regPhone = /^010[0-9]{3,4}[0-9]{4}$/;\r\n");
      out.write("\t\t\t\tif(regPhone.test($('#mPhone').val())){ // 전화번호 정규식 조건을 통과 했을 경우\r\n");
      out.write("\t\t\t\t\t$('.phone_result').text('');\r\n");
      out.write("\t\t\t\t\tphonePass = true;\r\n");
      out.write("\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t$('.phone_result').text('010을 포함하여 -(하이픈) 없이 입력하세요.');\r\n");
      out.write("\t\t\t\t\t$('.phone_result').css('color', 'red');\r\n");
      out.write("\t\t\t\t\tphonePass = false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 회원가입(join)\r\n");
      out.write("\t\tfunction fn_join() {\r\n");
      out.write("\t\t\t$('#join_btn').click(function(){\r\n");
      out.write("\t\t\t\tif((!namePass || $('#mName').val() == '') && !fromKakao){\r\n");
      out.write("\t\t\t\t\talert('이름을 확인하세요.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t} else if((!idPass || $('#mId').val() == '') && !fromKakao){\r\n");
      out.write("\t\t\t\t\talert('아이디를 확인하세요.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t} else if(!pwPass || $('#mPw').val() == ''){\r\n");
      out.write("\t\t\t\t\talert('비밀번호를 확인하세요.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t} else if(!pwPass2 || $('#mPw2').val() == ''){\r\n");
      out.write("\t\t\t\t\talert('비밀번호 확인을 검증하세요.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t} else if(!emailPass || $('#mEmail').val() == ''){\r\n");
      out.write("\t\t\t\t\talert('이메일을 확인하세요.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t} else if(!authPass){\r\n");
      out.write("\t\t\t\t\talert('이메일 인증은 필수입니다.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t} else if(!phonePass || $('#mPhone').val() == ''){\r\n");
      out.write("\t\t\t\t\talert('전화번호를 올바르게 입력하세요.');\r\n");
      out.write("\t\t\t\t    return false;\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t$('#f').attr('action', 'join.do');\r\n");
      out.write("\t\t\t\t\t$('#f').submit();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 카카오 API 초기화\r\n");
      out.write("\t\tKakao.init('464a8f29a97a043193116da7f11294e8');\r\n");
      out.write("\t\r\n");
      out.write("\t\t// 카카오 정보 가져오기(getKakaoInfo)\r\n");
      out.write("\t\tfunction fn_getKakaoInfo(){\r\n");
      out.write("\t\t\tKakao.API.request({ // 카카오에서 가져 올 프로퍼티 요청\r\n");
      out.write("\t\t\t    url: '/v2/user/me', // 사용자 정보 가져오는 api url\r\n");
      out.write("\t\t\t    data: { // 아이디, 닉네임, 이메일 가져오기\r\n");
      out.write("\t\t\t        property_keys: [\"id\",\"properties.nickname\",\"kakao_account.email\"]\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    success: function(response) {\r\n");
      out.write("\t\t\t    \t$('#mId').val(response.id + \"@K\"); // 아이디에 @K를 붙여 일반 회원과 구분\r\n");
      out.write("\t\t\t    \t$('#mName').val(response.properties.nickname);\r\n");
      out.write("\t\t\t    \t$('#mEmail').val(response.kakao_account.email);\r\n");
      out.write("\t\t\t    \t\r\n");
      out.write("\t\t\t    \t// 카카오에서 가져온 아이디, 이메일은 변경 불가(이메일 인증 필요 없음)\r\n");
      out.write("\t\t\t    \t$('#emailCode_btn').click(function(){ }).prop(\"disabled\", true); // 인증버튼 비활성화\r\n");
      out.write("\t\t\t    \t$('#mId, #mEmail').keyup(function(){ }).prop(\"readonly\", true); // 아이디, 이메일 읽기만 가능\r\n");
      out.write("\t\t\t    \t$('#mId, #mEmail').css('color', '#c0c0c0');\r\n");
      out.write("\t\t\t    \t$('.kakao_id').text('아이디 변경 불가');\r\n");
      out.write("\t\t\t    \t$('.kakao_email').text('이메일 변경 불가(인증 필요 없음)');\r\n");
      out.write("\t\t\t    \t\r\n");
      out.write("\t\t\t    \temailPass = true;\r\n");
      out.write("\t\t\t    \tauthPass = true;\r\n");
      out.write("\t\t\t    \tfromKakao = true;\r\n");
      out.write("\t\t\t    },\r\n");
      out.write("\t\t\t    fail: function(error) {\r\n");
      out.write("\t\t\t    \t\r\n");
      out.write("\t\t\t    }\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 회원가입 화면  -->\r\n");
      out.write("\t<div class=\"join_form\">\r\n");
      out.write("\t\t<form id=\"f\" method=\"post\">\r\n");
      out.write("\t\t\t<span class=\"naming\">이름</span><br>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"mName\" id=\"mName\" placeholder=\"ex) 홍길동 or hong\"><br>\r\n");
      out.write("\t\t\t<span class=\"name_result\"></span><br><br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<span class=\"naming\">아이디</span><br>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"mId\" id=\"mId\" placeholder=\"ex) hong123\"><br>\r\n");
      out.write("\t\t\t<span class=\"id_result kakao_id\"></span><br><br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<span class=\"naming\">비밀번호</span><br>\r\n");
      out.write("\t\t\t<input type=\"password\" name=\"mPw\" id=\"mPw\"><br>\r\n");
      out.write("\t\t\t<span class=\"pw_result\"></span><br><br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<span class=\"naming\">비밀번호 확인</span><br>\r\n");
      out.write("\t\t\t<input type=\"password\" name=\"mPw2\" id=\"mPw2\"><br>\r\n");
      out.write("\t\t\t<span class=\"pw2_result\"></span><br><br>\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t<span class=\"naming\">이메일</span><br>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"mEmail\" id=\"mEmail\" placeholder=\"ex) hong123@example.com\"><br>\r\n");
      out.write("\t\t\t<span class=\"email_result kakao_email\"></span><br><br>\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"emailCode_btn\" value=\"인증코드 받기\"><br>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"userKey\" id=\"userKey\" style=\"width:180px;\">\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"emailAuth_btn\" value=\"인증하기\" style=\"width:108px; height:45px;\"><br>\r\n");
      out.write("\t\t\t<span class=\"emailAuth_result\"></span><br><br><br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<span class=\"naming phone\">전화번호</span><br>\r\n");
      out.write("\t\t\t<input type=\"text\" name=\"mPhone\" id=\"mPhone\" placeholder=\"-(하이픈)없이 입력\"><br>\r\n");
      out.write("\t\t\t<span class=\"phone_result\"></span><br><br>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<input type=\"button\" id=\"join_btn\" value=\"가입하기\" ><br>\r\n");
      out.write("\t\t\t<input type=\"button\" value=\"돌아가기\" onclick=\"location.href='index.do'\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\t</section>\r\n");
      out.write("\t\r\n");
      out.write("\t<footer id=\"footer\">\r\n");
      out.write("\t\t<dl>\r\n");
      out.write("\t\t\t<dt>\r\n");
      out.write("\t\t\t\t<h3>MOOYA HOTEL</h3>\r\n");
      out.write("\t\t\t</dt>\r\n");
      out.write("\t\t\t<dd>\r\n");
      out.write("\t\t\t\t<span id=\"privacy\" style=\"cursor: pointer;\">개인정보처리방침</span>\r\n");
      out.write("\t\t\t\t<span id=\"term\" style=\"cursor: pointer;\">이용약관</span>\r\n");
      out.write("\t\t\t\t<span id=\"noEmail\" style=\"cursor: pointer;\">이메일주소 무단수집거부</span>\r\n");
      out.write("\t\t\t</dd>\r\n");
      out.write("\t\t</dl>\r\n");
      out.write("\t\t<address>\r\n");
      out.write("\t\t\t<span>서울특별시 마포구 서강로 136 아이비티워 2층,3층</span>\r\n");
      out.write("\t\t\t<span>  Tel. 02-123-4567  </span>\r\n");
      out.write("\t\t\t<span> (주)무야호 </span>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<span> \r\n");
      out.write("\t\t\t\tE-mail. \r\n");
      out.write("\t\t\t\t<a href=\"mailto:hotel@mooyahotel.co.kr\">hotel@mooyahotel.co.kr</a>\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<span>대표자 : 유재석  </span>\r\n");
      out.write("\t\t\t<span>등록번호 111 22 33333</span>\r\n");
      out.write("\t\t</address>\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t\t\t<i class=\"far fa-copyright\"></i>\r\n");
      out.write("\t\t\t<b>www.mooyahotel.com</b>\r\n");
      out.write("\t\t\t<span>All rights reserved.</span>\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\t</footer>\r\n");
      out.write("\t\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write(' ');
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
