/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.65
 * Generated at: 2021-07-14 14:23:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class findPw_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/spring0303/project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/SpringD/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1624616931203L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>비밀번호 찾기</title>\r\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\" integrity=\"sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\t// 페이지 로드\r\n");
      out.write("\t\t$(document).ready(function(){\r\n");
      out.write("\t\t\tfn_email_code();\r\n");
      out.write("\t\t\t// fn_emailCheck();\r\n");
      out.write("\t\t\tfn_idAndEmailCheck();\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\t// 아이디&이메일 일치 확인(idAndEmailCheck) : 구현하기 어려워서 아직 보류 중...\r\n");
      out.write("\t\tvar idAndEmailPass = false;\r\n");
      out.write("\t\tfunction fn_idAndEmailCheck(){\r\n");
      out.write("\t\t\t$('#mId, #mEmail').keyup(function(){\r\n");
      out.write("\t\t\t\tvar obj = {\r\n");
      out.write("\t\t\t\t\t\tmId: $('#mId').val(),\r\n");
      out.write("\t\t\t\t\t\tmEmail: $('#mEmail').val()\r\n");
      out.write("\t\t\t\t};\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: 'idAndEmailCheck.do',\r\n");
      out.write("\t\t\t\t\ttype: 'post',\r\n");
      out.write("\t\t\t\t\tcontentType: 'application/json',\r\n");
      out.write("\t\t\t\t\tdata: JSON.stringify(obj),\r\n");
      out.write("\t\t\t\t\tasync: false,\r\n");
      out.write("\t\t\t\t\tdataType: 'json',\r\n");
      out.write("\t\t\t\t\tsuccess: function(res){\r\n");
      out.write("\t\t\t\t\t\tif(res.result == 0){\r\n");
      out.write("\t\t\t\t\t\t\t$('.result').text('가입하신 아이디와 이메일이 일치하지 않습니다. 다시 확인하세요.');\r\n");
      out.write("\t\t\t\t\t\t\tidAndEmailPass = false;\r\n");
      out.write("\t\t\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\t\t\t$('.result').text('가입하신 이메일로 인증코드를 받으세요.');\r\n");
      out.write("\t\t\t\t\t\t\tidAndEmailPass = true;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 이메일 확인(emailCheck) : 가입할 때 사용했던 이메일 중복 체크 재사용\r\n");
      out.write("\t\t/* var emailPass = false;\r\n");
      out.write("\t\tfunction fn_emailCheck(){\r\n");
      out.write("\t\t\t$('#mEmail').keyup(function(){\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: 'emailCheck.do',\r\n");
      out.write("\t\t\t\t\ttype: 'get',\r\n");
      out.write("\t\t\t\t\tdata: 'mEmail=' + $('#mEmail').val(),\r\n");
      out.write("\t\t\t\t\tdataType: 'json',\r\n");
      out.write("\t\t\t\t\tsuccess: function(res){\r\n");
      out.write("\t\t\t\t\t\tif(res.result == 0){ // 일치하는 이메일이 없다면\r\n");
      out.write("\t\t\t\t\t\t\t$('.email_result').text('등록되지 않은 이메일입니다. 이메일 주소를 확인하세요.');\r\n");
      out.write("\t\t\t\t\t\t\t$('#email_code_btn').click(function(){ }).prop(\"disabled\", true); // 이메일 인증코드 버튼 비활성화\r\n");
      out.write("\t\t\t\t\t\t\t\temailPass = false;\r\n");
      out.write("\t\t\t\t\t\t} else{ // 일치하는 이메일이 있다면\r\n");
      out.write("\t\t\t\t\t\t\t$('.email_result').text('이메일이 확인되었습니다. 인증번호를 받으세요.');\r\n");
      out.write("\t\t\t\t\t\t\t$('#email_code_btn').click(function(){ }).prop(\"disabled\", false); // 이메일 인증코드 버튼 활성화\r\n");
      out.write("\t\t\t\t\t\t\t\temailPass = true;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t} */\r\n");
      out.write("\t\t// 이메일 인증코드 받기(emailCode)\r\n");
      out.write("\t\tfunction fn_email_code(){\r\n");
      out.write("\t\t\t$('#email_code_btn').click(function(){\r\n");
      out.write("\t\t\t\tif ($('#mId').val() == '' || $('#mEmail').val() == '') { // 아이디, 이메일 중 하나라도 입력 값이 없다면\r\n");
      out.write("\t\t\t\t\talert('아이디와 이메일 모두 입력하세요.');\r\n");
      out.write("\t\t\t\t\treturn false;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\turl: 'emailCode.do',\r\n");
      out.write("\t\t\t\t\ttype: 'get',\r\n");
      out.write("\t\t\t\t\tdata: 'mEmail=' + $('#mEmail').val(),\r\n");
      out.write("\t\t\t\t\tdataType: 'json',\r\n");
      out.write("\t\t\t\t\tsuccess: function(resultMap) {\r\n");
      out.write("\t\t\t\t\t\talert('인증코드가 발송되었습니다.');\r\n");
      out.write("\t\t\t\t\t\tfn_email_auth(resultMap.authCode);\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\terror: function(xhr, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 이메일 인증(emailAuth)\r\n");
      out.write("\t\tfunction fn_email_auth(authCode) {\r\n");
      out.write("\t\t\t$('#email_auth_btn').click(function() {\r\n");
      out.write("\t\t\t\tif(authCode == $('#user_key').val()) {\r\n");
      out.write("\t\t\t\t\talert('인증되었습니다. 비밀번호 변경 페이지로 이동합니다.');\r\n");
      out.write("\t\t\t\t\t$('#f').attr('action', 'changePwPage.do');\r\n");
      out.write("\t\t\t\t\t$('#f').submit();\r\n");
      out.write("\t\t\t\t} else{\r\n");
      out.write("\t\t\t\t\talert('인증에 실패했습니다. 인증코드를 정확히 입력하세요.');\r\n");
      out.write("\t\t\t\t\thistory.back();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<h3>비밀번호 찾기</h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<form id=\"f\" method=\"post\">\r\n");
      out.write("\t\t가입 당시 이메일을 입력하세요.<br><br>\r\n");
      out.write("\t\t<input type=\"text\" name=\"mId\" id=\"mId\" placeholder=\"ID\"><br>\r\n");
      out.write("\t\t<input type=\"text\" name=\"mEmail\" id=\"mEmail\" placeholder=\"Email\"><br>\r\n");
      out.write("\t\t<span class=\"email_result\"></span><br><br>\r\n");
      out.write("\t\t<input type=\"button\" value=\"인증번호 받기\" id=\"email_code_btn\"><br>\r\n");
      out.write("\t\t<input type=\"text\" name=\"user_key\" id=\"user_key\">\r\n");
      out.write("\t\t<input type=\"button\" value=\"인증하기\" id=\"email_auth_btn\"><br><br>\r\n");
      out.write("\t\t<span class=\"emailAuth_result\"></span><br>\r\n");
      out.write("\t\t<input type=\"button\" value=\"돌아가기\" onclick=\"location.href='index.do'\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
